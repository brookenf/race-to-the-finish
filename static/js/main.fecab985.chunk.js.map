{"version":3,"sources":["components/Chart/index.js","App.js","serviceWorker.js","index.js"],"names":["options","chart","type","title","text","series","data","Chart","react_default","a","createElement","highcharts_react_min_default","highcharts","Highcharts","Component","App","className","href","target","rel","src","alt","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAcMA,EAAU,CACdC,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,YAERC,OAAQ,CACN,CACEC,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,MAsBbC,mLARX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAiBG,WAAYC,IAAYb,QAASA,YARtCc,aCSLC,mLA3BX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,eACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,0BAChBR,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,WAASM,UAAU,aACjBR,EAAAC,EAAAC,cAAA,8JAGiBF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,gEAAgEC,OAAO,SAASC,IAAI,uBAA5F,UAHjB,qUAKAX,EAAAC,EAAAC,cAAA,8MACoMF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBAA/D,0BADpM,sFACsYX,EAAAC,EAAAC,cAAA,KAAGO,KAAK,kBAAkBC,OAAO,SAASC,IAAI,uBAA9C,mBADtY,wHACklBX,EAAAC,EAAAC,cAAA,KAAGO,KAAK,mBAAmBC,OAAO,SAASC,IAAI,uBAA/C,mBADllB,QAC+qBX,EAAAC,EAAAC,cAAA,KAAGO,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,oBAD/qB,kFAGAX,EAAAC,EAAAC,cAAA,OACEU,IAAI,sBACJC,IAAI,iCAENb,EAAAC,EAAAC,cAACY,EAAD,eA1BQR,aCKES,QACa,cAA7BC,OAAOC,SAASC,UAEW,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD6I3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.fecab985.chunk.js","sourcesContent":["// import appalachian from \"../../data/appalachian\";\n// import davidson from \"../../data/davidson\";\n// import duke from \"../../data/duke\";\n// import ecu from \"../../data/ecu\";\n// import elizabethCity from \"../../data/elizabeth-city-state\";\n// import elon from \"../../data/elon\";\n// import ncsu from \"../../data/ncsu\";\n// import uncSchools from \"../../data/unc-schools\";\n// import wake from \"../../data/wake-forest\";\n// import wcu from \"../../data/wcu\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport React, { Component } from \"react\";\n\nconst options = {\n  chart: {\n    type: \"bar\",\n  },\n  title: {\n    text: \"My chart\",\n  },\n  series: [\n    {\n      data: [1, 2, 1, 4, 3, 6],\n    },\n  ],\n};\n\n/** Chart component builds the highchart\n * and renders it on the page\n */\nclass Chart extends Component {\n  /** renders the highchart\n   * @return {any} build HighchartsReact\n   * pass through Highcharts and options\n   */\n  render() {\n    return (\n      <div>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Chart from \"./components/Chart/\";\n\n/** App component builds out main part\n * of website.\n */\nclass App extends Component {\n  /**\n * Render the main page.\n * @return {any} JSX element\n */\n  render() {\n    return (\n      <div className=\"flex-column\">\n        <header className=\"App-header flex-column\">\n          <h1>Race to the Finish</h1>\n          <h3>A look at how race affects college completion rates</h3>\n          <h4>By Brooke Fisher</h4>\n        </header>\n        <section className=\"main flex\">\n          <p>\n            Race plays an important factor in undestanding how someone's college\n            completion rate can be affected by his or her own's identity.\n            According to a <a href=\"https://nscresearchcenter.org/signaturereport12-supplement-2/\" target=\"_blank\" rel=\"noopener noreferrer\">report</a> published by the National Student Clearinghouse Research Center in 2017. This data found that 6-year completion rates of black students were the lowest among all racial groups at 45.9 percent, while Asians had the higest 6-year completion rate at 71.7 percent. The average across 6-year completion rate was 62.4 percent.\n          </p>\n          <p>\n            North Carolina's 6-year completion rates vary dramatically throughout the state. Among several public and private four-year universities, the latest data from the U.S. Department of Education's <a href=\"https://collegescorecard.ed.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">College Scorecard Data</a> has shown vastly different completion rates. Among public four-year universities, <a href=\"https://unc.edu\" target=\"_blank\" rel=\"noopener noreferrer\">UNC-Chapel Hill</a>, the flagship school of the UNC System, had the higest 6-year completion rate at 91.1 percent. Private universities <a href=\"https://duke.edu\" target=\"_blank\" rel=\"noopener noreferrer\">Duke University</a> and <a href=\"https://davidson.edu\" target=\"_blank\" rel=\"noopener noreferrer\">Davidson College</a>, with 6-year completion rates at 94.6 percent and 94.8 percent, respectively.\n          </p>\n          <img\n            src=\"/img/nc-outline.svg\"\n            alt=\"An outline of North Carolina\"\n          />\n          <Chart />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\n/** Register the service worker\n* @param {object} config\n*/\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/** Register the service worker as valid\n* @param {string} swUrl\n* @param {object} config\n*/\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n                console.log(\n                    \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n      // eslint-disable-next-line no-console\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\n/** Check if the service worker is valid\n* @param {string} swUrl\n* @param {object} config\n*/\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n      // eslint-disable-next-line no-console\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\n/** Unregister the service worker */\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}